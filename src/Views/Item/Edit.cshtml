@model Scrapbook101.Models.CombinedModel

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<p>Edit</p>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Item.Id)

    <div class="form-group">
        @Html.LabelFor(model => model.Item.Id, htmlAttributes: new { @class = "control-label col-md-2 cust-control-label" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Item.Id, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Item.Type, htmlAttributes: new { @class = "control-label col-md-2 cust-control-label" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Item.Type, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        </div>
    </div>

    <hr/>

    <div class="form-group">
        @Html.LabelFor(model => model.Item.AssetPath, htmlAttributes: new { @class = "control-label col-md-2 cust-control-label" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Item.AssetPath, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Item.AssetPath, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group second-level-json">
        @Html.LabelFor(model => model.Item.Assets, htmlAttributes: new { @class = "control-label col-md-2 cust-control-label" })
        <div class="col-md-10">
            @{
                if (Model.Item.Assets != null)
                {
                    int i = 0;
                    foreach (var asset in Model.Item.Assets)
                    {
                        @Html.TextBoxFor(m => m.Item.Assets[i].Name, new { @style = "border:none; width: 35%", @readonly = "readonly" })
                        @Html.TextBoxFor(m => m.Item.Assets[i].Size, new { @style = "border:none; width: 10%", @readonly = "readonly" })
                        <input type='checkbox' name='FilesToRemove' value='@asset.Name' />
                        @Html.Raw("Delete <br/>")
                        i++;
                    }
                }
            }
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Item.DateAdded, htmlAttributes: new { @class = "control-label col-md-2 cust-control-label" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Item.DateAdded, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.Item.DateAdded, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Item.DateUpdated, htmlAttributes: new { @class = "control-label col-md-2 cust-control-label" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Item.DateUpdated, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.Item.DateUpdated, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Item.UpdatedBy, htmlAttributes: new { @class = "control-label col-md-2 cust-control-label" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Item.UpdatedBy, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Item.UpdatedBy, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Item.Location, htmlAttributes: new { @class = "control-label col-md-2 cust-control-label" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Item.Location, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Item.Location, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Item.Category, htmlAttributes: new { @class = "control-label col-md-2 cust-control-label" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.Item.Category,
                                  new SelectList(Model.CategoryItemsForDisplay, "Id", "Name", Model.CategoryItemsForDisplay[0]),
                                  new { @class = "form-control"} )
            @Html.ValidationMessageFor(model => model.Item.Category, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group second-level-json">
        <!--@Html.LabelFor(model => model.Item.CategoryFields, htmlAttributes: new { @class = "control-label col-md-2 cust-control-label" }) -->
        <div class="col-md-10" id="categoryFieldsContainer">
            @{
                var activeFields = Model.CategoryFieldMappingList.First(x => string.Compare(x.Name, Model.Item.Category, true) == 0).ActiveFields;
                foreach (var field in activeFields)
                {
                    string val = "";
                    if (Model.Item.CategoryFields != null)
                    {
                        val = Model.Item.CategoryFields[field] == null ? "" : Model.Item.CategoryFields[field].ToString();
                    }
                    @(Html.LabelFor(x => x.Item.CategoryFields[field], new { @style = "color:blue" }))
                    @(Html.TextBoxFor(x => x.Item.CategoryFields[field], new { @class = "form-control" })) @Html.Raw("<br/>")
                }
            }
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Item.Title, htmlAttributes: new { @class = "control-label col-md-2 cust-control-label" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Item.Title, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Item.Title, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Item.Description, htmlAttributes: new { @class = "control-label col-md-2 cust-control-label" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Item.Description, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Item.Description, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Item.Rating, htmlAttributes: new { @class = "control-label col-md-2 cust-control-label" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Item.Rating, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Item.Rating, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {
            $('#Item_Category').change(function () {

                /* Get the selected value of dropdownlist */
                var selectedID = $(this).val();

                /* Request the partial view with .get request. */
                $.get('/Category/GetCategoryFields?category=' + selectedID, function (data) {

                    /* data is the pure html returned from action method, load it to your page */
                    $('#categoryFieldsContainer').html(data);
                });
            });
        });
    </script>
}
