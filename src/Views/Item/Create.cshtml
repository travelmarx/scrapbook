@model Scrapbook101.Models.CombinedModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<p>Create</p>


@using (Html.BeginForm("Create", "Item", FormMethod.Post, new { @id = "formPost", @enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.Item.Type, htmlAttributes: new { @class = "control-label col-md-2 cust-control-label" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Item.Type, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.Item.Type, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Item.Id, htmlAttributes: new { @class = "control-label col-md-2 cust-control-label" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Item.Id, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        </div>
    </div>

    <hr />
    <div class="form-group">
        @Html.LabelFor(model => model.Item.AssetPath, htmlAttributes: new { @class = "control-label col-md-2 cust-control-label" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Item.AssetPath, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Item.AssetPath, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Item.Assets, htmlAttributes: new { @class = "control-label col-md-2 cust-control-label" })
        <div class="col-md-10">
            <div id="FileList"></div>
            <input type="file" name="LocalHttpPostedFileList" id="LocalHttpPostedFileList" multiple style="display:none" />
            <input type="button" value="Add local files" onclick="document.getElementById('LocalHttpPostedFileList').click();" class="btn btn-default" style="display:inline" />
            <hr />
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Item.DateAdded, htmlAttributes: new { @class = "control-label col-md-2 cust-control-label" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Item.DateAdded, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.Item.DateAdded, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Item.DateUpdated, htmlAttributes: new { @class = "control-label col-md-2 cust-control-label" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Item.DateUpdated, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.Item.DateUpdated, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Item.UpdatedBy, htmlAttributes: new { @class = "control-label col-md-2 cust-control-label" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Item.UpdatedBy, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Item.UpdatedBy, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Item.Location, htmlAttributes: new { @class = "control-label col-md-2 cust-control-label" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Item.Location, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Item.Location, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Item.Category, htmlAttributes: new { @class = "control-label col-md-2 cust-control-label" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.Item.Category,
                                  new SelectList(Model.CategoryItemsForDisplay, "Id", "Name", Model.CategoryItemsForDisplay[0]),
                                  new { @class = "form-control"} )
            @Html.ValidationMessageFor(model => model.Item.Category, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group second-level-json">
        @Html.LabelFor(model => model.Item.CategoryFields, htmlAttributes: new { @class = "control-label col-md-2 cust-control-label" })
        <div id="categoryFieldsContainer" class="col-md-10"></div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Item.Title, htmlAttributes: new { @class = "control-label col-md-2  cust-control-label" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Item.Title, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Item.Title, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Item.Description, htmlAttributes: new { @class = "control-label col-md-2 cust-control-label" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Item.Description, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Item.Description, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Item.Rating, htmlAttributes: new { @class = "control-label col-md-2 cust-control-label" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Item.Rating, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Item.Rating, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            $('#Item_Category').change(function () {

                /* Get the selected value of dropdownlist */
                var selectedID = $(this).val();

                /* Request the partial view with .get request. */
                $.get('/Category/GetCategoryFields?category=' + selectedID, function (data) {

                    /* data is the pure html returned from action method, load it to your page */
                    $('#categoryFieldsContainer').html(data);
                });
            });
            $.get('/Category/GetCategoryFields?category=Book', function (data) {
                $('#categoryFieldsContainer').html(data);
            });
        });
        $(document).ready(function () {
            $("#localFilesToUpload").click(function () {
                this.value = null;
            });
            $("#LocalHttpPostedFileList").change(function () {
                var baseName = "LocalUploadFileList"; // name of expected model structure that tracks renames
                var files = document.getElementById('LocalHttpPostedFileList').files;
                if (files.length > 0) {
                    for (i = 0; i < files.length; i++) {
                        $('<input>').attr({
                            //type: 'hidden',
                            id: baseName + '_' + i + '__Name',
                            name: baseName + '[' + i + '].Name',
                            value: files[i].name,
                            style: 'border:none; width: 40%'
                        }).appendTo('#FileList');
                        $('<input>').attr({
                            //type: 'hidden',
                            id: baseName + '_' + i + '__Size',
                            name: baseName + '[' + i + '].Size',
                            value: files[i].size,
                            readonly: true,
                            style: 'border:none; width: 10%'
                        }).appendTo('#FileList');
                        $('<input>').attr({
                            type: 'hidden',
                            id: baseName + '_' + i + '__Path',
                            name: baseName + '[' + i + '].Path',
                            value: files[i].name,  // not a true path, not used for local uploads
                            style: 'width: 5%'
                        }).appendTo('#FileList');
                        $('<br/>').appendTo('#FileList');
                    }
                }
            });
        });
    </script>
}
